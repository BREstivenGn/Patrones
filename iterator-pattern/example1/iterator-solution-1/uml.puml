@startuml

skinparam titleBorderRoundCorner 15
skinparam titleBorderThickness 2
skinparam titleBorderColor blue


header
<font color=red>Warning:</font>
Educational Purposes
endheader

center footer Carlos Caballero ([[https://www.carloscaballero.io https://www.carloscaballero.io]])


title Iterator Pattern


class Client
interface Iterator<T> {
    +current(): T
    +next(): T
    +key(): number
    +hasMoreElements(): boolean
    +rewind(): void
}
interface Aggregator {
    +getIterator(): Iterator<string>
    +getReverseIterator(): Iterator<string>
}
class WordsCollection implements Aggregator {
    -items: string[]
    +getItems(): string[]
    +getCount(): number
    +addItem(item: string): void
    +getIterator(): Iterator<string>
    +getReverseIterator(): Iterator<string>
}
class AlphabeticalOrderIterator implements Iterator {
    -collection: WordsCollection
    -position: number
    -reverse: boolean
    +rewind(): void
    +current(): string
    +key(): number
    +next(): string
    +hasMoreElements(): boolean
}

WordsCollection .> AlphabeticalOrderIterator : "<<use>>"
WordsCollection <.. Client : "<<use>>"

note left of WordsCollection::getIterator
getIterator(): Iterator<String>{
    return new AlphabeticalOrderIterator(this);
}
end note 

note left of WordsCollection::getReverseIterator
getReverseIterator(): Iterator<String>{
    return new AlphabeticalOrderIterator(this, true);
}
end note 

 note left of Client 
const iterator = collection.getIterator();
while(!iterator.hasMoreElements()){
    console.log(iterator.next());
}

const reverseIterator = collection.getReverseIterator();
while(!reverseIterator.hasMoreElements()){
    console.log(reverseIterator.next());
}
end note 


@enduml